//TriggerHandler

public with sharing class StockItemTriggerHandler {

  public static void onBeforeInsert(List<Stock_Item__c> newStockItems) {
    Set<String> existingItemNames = new Set<String>();
    for (Select Item_Name__c from Stock_Item__c where Item_Name__c IN :newStockItems) {
      existingItemNames.add(Item_Name__c);
    }

    for (Stock_Item__c newItem : newStockItems) {
      if (existingItemNames.contains(newItem.Item_Name__c)) {
        throw new DuplicateItemNameException('Item' + newItem.Item_Name__c + 'already exsists.' + Select a new Item Name.');
      }
    }
  }

 public static void onBeforeDelete(List<Stock_Item__c> stockItemsToDelete) {
    List<Case> newCases = new List<Case>();
    for (Stock_Item__c deletedItem : stockItemsToDelete) {
        if (deletedItem.Stock_On_Hand__c > 0) {
            Case c = new Case();
            c.Status = 'New';
            c.Subject = 'Updated Stock On Hand';
            c.Description = 'Stock Item ' + deletedItem.Item_Name__c + ' has ' + deletedItem.Stock_On_Hand__c + ' items remaining in stock.';
            //Case Owner can be determined based on Case Assignment Rules 
            newCases.add(c);
        }
    }

    if (!newCases.isEmpty()) {
        insert newCases;
    }
}
}
