public with sharing class StockItemTriggerHandler {

    // Before Inserting New Stock Items
    public static void onBeforeInsert(List<Stock_Item__c> newStockItems) {
        Set<String> existingItemNames = new Set<String>();

        // Get a list of existing Stock Item Names
        for (Stock_Item__c existingItem : [SELECT Item_Name__c FROM Stock_Item__c WHERE Item_Name__c IN :newStockItems]) {
            existingItemNames.add(existingItem.Item_Name__c);
        }

        // Check for duplicate item names in newStockItems
        for (Stock_Item__c newItem : newStockItems) {
            if (existingItemNames.contains(newItem.Item_Name__c)) {
                // If duplicates are found, update the name of the new item to reflect that one already exists
                newItem.Item_Name__c += 'duplicate item';
            }
        }
    }

    // Before deleting Stock Item records
    public static void onBeforeDelete(List<Stock_Item__c> stockItemsToDelete) {
        List<Case> newCases = new List<Case>();

        // Collect the names of Stock Items to be deleted with stock on hand greater than 0
        Set<String> itemNamesWithStock = new Set<String>();
        for (Stock_Item__c deletedItem : stockItemsToDelete) {
            if (deletedItem.Stock_On_Hand__c > 0) {
                itemNamesWithStock.add(deletedItem.Item_Name__c);
            }
        }

        // Create new Case records for items with stock on hand
        for (String itemName : itemNamesWithStock) {
            Case c = new Case();
            c.Status = 'New';
            c.Subject = 'Updated Stock On Hand';
            c.Description = 'Stock Item ' + itemName + ' has items remaining in stock.';
            // Case Owner can be determined based on Case Assignment Rules
            newCases.add(c);
        }

        // Insert new Case records if the list is not empty
        if (!newCases.isEmpty()) {
            insert newCases;
        }
    }

    // List of Stock Items with Low Stock
    public static List<Stock_Item__c> getLowStockItems() {
        List<Stock_Item__c> lowStockItems = new List<Stock_Item__c>();

        // Retrieve list of stock items with stock on hand at or below minimum stock level
        for (Stock_Item__c item : [SELECT Id, Item_Name__c, Item_Stock_is_Low__c, Minimum_Stock_Level__c, Stock_On_Hand__c 
                                   FROM Stock_Item__c WHERE Stock_On_Hand__c <= Minimum_Stock_Level__c]) {
            lowStockItems.add(item);
        }

        return lowStockItems;
    }
}
